pipeline {
    agent {
        label 'ec2-fleet'
    }
    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    echo "Checking for Docker installation..."

                    def dockerExists = sh(
                        script: 'which docker || true',
                        returnStdout: true
                    ).trim()

                    if (dockerExists == '') {
                        echo "Docker not found. Installing Docker..."
                        sh '''
                            set -euxo pipefail
                            apt-get update
                            apt-get install -y \
                                ca-certificates \
                                curl \
                                gnupg \
                                lsb-release

                            install -m 0755 -d /etc/apt/keyrings
                            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
                                gpg --dearmor -o /etc/apt/keyrings/docker.gpg
                            chmod a+r /etc/apt/keyrings/docker.gpg

                            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
                            https://download.docker.com/linux/ubuntu \
                            $(lsb_release -cs) stable" | \
                            tee /etc/apt/sources.list.d/docker.list > /dev/null

                            apt-get update
                            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

                            systemctl enable docker
                            systemctl start docker
                        '''
                    } else {
                        echo "Docker is already installed."
                    }
                }
            }
        }

        stage('Wait for Docker') {
            steps {
                script {
                     echo "Waiting for Docker daemon to be ready..."
                    retry(30) { // Retry for up to 30 attempts (sleeping 5s between = 150 seconds max)
                     sh '''
                    set -e
                    if ! docker info >/dev/null 2>&1; then
                      echo "Docker not ready yet, sleeping..."
                      sleep 5
                      exit 1
                    fi
                '''
            }
            echo "Docker daemon is ready!"
        }
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'openjdk:11'
                    args '-u root' // Important: allows the container to run as root, useful if permission issues
                }
            }
            steps {
                script {
                    sh 'chmod +x gradlew'
                    sh './gradlew build'
                }
            }
        }
    }
}
