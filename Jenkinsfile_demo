def getDockerTag(){
        def tag = sh (script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        return tag
}

def getAwsAccountId(){
        def accountId = sh (script: 'aws sts get-caller-identity --query "Account" --output text', returnStdout: true).trim()
        return accountId
}



pipeline {
    agent {
        label 'ec2-fleet'
    }

    environment{
	    Docker_tag = getDockerTag()
        aws_account_id = getAwsAccountId()
        aws_region = "us-east-1"
        SONARQUBE_URL = "http://54.91.37.155:9000/"
    }

    stages {
        stage('initial checks') {
            parallel {
                stage('Sanity-Check') {
                    steps {
                        echo 'Checking if SonarQube is up...'
                        sh '''
                            
                            STATUS=$(curl --write-out "%{http_code}" --silent --output /dev/null ${SONARQUBE_URL}/api/system/health)

                            if [ "$STATUS" -ne 200 ]; then
                            echo "SonarQube is not reachable or unhealthy! Status code: $STATUS"
                            exit 1
                            fi

                            echo "SonarQube is up and healthy!"
                        '''
                    }
                }

                stage("helath-check"){
                    steps{
                        script{
                            sh 'chmod +x health-check.sh'
                            sh './health-check.sh'
                        }
                    }
                }
            }
        }

        stage('Build and Sonar parallel') {
            parallel {
                stage('Build') {
                    steps {
                        script {
                            docker.image('openjdk:11').inside('--user root') {
                                sh 'chmod +x gradlew'
                                sh './gradlew build'
                            }
                        }
                    }
                }

                stage('sonar-scan') {
                    steps {
                        script {
                            docker.image('openjdk:11').inside('--user root') {
                            try {
                                withSonarQubeEnv(credentialsId: 'sonar-token') {
                                        sh 'chmod +x gradlew'
                                        sh './gradlew sonarqube'
                                }
                            } catch (err) {
                                currentBuild.result = 'unstable'
                                echo "sonarQube scan failed, marking build as UNSTABLE. Error:${err}"
                                return 
                            }
                            
                            timeout(time: 1, unit: 'HOURS') {
                              def qg = waitForQualityGate()
                              if (qg.status != 'OK') {
                                   error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                 }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('docker-Build') {
            steps {
                script {
                        sh 'docker build -t spring-app:${Docker_tag} . '
                        currentBuild.description = "spring-app:${Docker_tag}"
                }
            }
        }

        stage('docker-push') {
            steps {
                script {
                        sh '''
                            aws ecr get-login-password --region ${aws_region} | docker login --username AWS --password-stdin ${aws_account_id}.dkr.ecr.${aws_region}.amazonaws.com
                            docker tag spring-app:${Docker_tag} ${aws_account_id}.dkr.ecr.${aws_region}.amazonaws.com/spring-app:${Docker_tag}
                            docker push ${aws_account_id}.dkr.ecr.${aws_region}.amazonaws.com/spring-app:${Docker_tag}
                            docker rmi ${aws_account_id}.dkr.ecr.${aws_region}.amazonaws.com/spring-app:${Docker_tag} spring-app:${Docker_tag}
                        '''
                }
            }
        }

        stage('prepare helm chart') {
            steps {
                script {
                        sh '''
                            sed -i "s:IMAGE_NAME:${aws_account_id}.dkr.ecr.${aws_region}.amazonaws.com/spring-app:" kubernetes/myapp/values.yaml
                        sed -i "s:IMAGE_TAG:${Docker_tag}:" kubernetes/myapp/values.yaml
                        helm package kubernetes/myapp/
                        helmversion=$( helm show chart kubernetes/myapp/ | grep version | cut -d: -f 2 | tr -d ' ')
                        aws s3 cp spring-app-$helmversion.tgz s3://s3-bucket-mayuprasad/helm-charts/spring-app-$helmversion.tgz
                        '''
                }
            }
        }

        stage("deploy to eks cluster") {
            steps {
                script {
                    dir('kubernetes') {
                        docker.image('061051230603.dkr.ecr.us-east-1.amazonaws.com/spring-app:deploy').inside('--user root') {
                            withCredentials([usernamePassword(credentialsId: 'aws-login', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                                sh '''
                                    mkdir -p /root/.aws
                                    echo "[default]" > /root/.aws/config
                                    echo "region = us-east-1" >> /root/.aws/config
                                    export AWS_CONFIG_FILE="/root/.aws/config"
                                    aws eks update-kubeconfig --region us-east-1 --name my-k8s-cluster1
                                    helm upgrade --install myjavaapp myapp/
                                    helm list 
                                    sleep 120
                                    kubectl get po 
                                '''
                            }
                        }
                    }
                }
            }
        }
    }


    post {
		always {
            archiveArtifacts artifacts: 'build/reports/tests/test/**', followSymlinks: false
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'build/reports/tests/test/', reportFiles: 'index.html', reportName: 'test-case-report', reportTitles: 'test-case-report', useWrapperFileDirectly: true])
			cleanWs()
		 }
	}
}
